import pytest

from VOTPUSK.Hotel_main.hotels_second_page.hotel_filters.hotel_filters import FiltersLocators
from VOTPUSK.Hotel_main.hotels_second_page.tests.TestBase import BaseTest
from VOTPUSK.Hotel_main.hotels_second_page.second_page_form.second_page_form import SecondFormLocators
from VOTPUSK.Hotel_main.hotels_second_page.config.configuration import TestDataSecondPage


class TestSecondHotelPage(BaseTest):

    @pytest.mark.smoke
    def test_hotel_booking_form(self, driver):
        driver.get(TestDataSecondPage.URL)
        check_the_form_visibility = SecondFormLocators(driver)
        check_the_form_visibility.check_the_form_visibility()
        clear_default_value_and_assert_the_len = SecondFormLocators(driver)
        clear_default_value_and_assert_the_len.clear_default_value_and_assert_the_len()
        assert_len_hotel_list = SecondFormLocators(driver)
        assert_len_hotel_list.assert_len_hotel_list()
        assert_check_in = SecondFormLocators(driver)
        assert_check_in.assert_check_in()
        select_check_in = SecondFormLocators(driver)
        select_check_in.select_check_in()
        assert_check_out = SecondFormLocators(driver)
        assert_check_out.assert_check_out()
        select_check_out = SecondFormLocators(driver)
        select_check_out.select_check_out()
        assert_dropdown_quantity = SecondFormLocators(driver)
        assert_dropdown_quantity.assert_dropdown_quantity()
        select_dropdown_quantity = SecondFormLocators(driver)
        select_dropdown_quantity.select_dropdown_quantity()
        check_input_sign = SecondFormLocators(driver)
        check_input_sign.check_input_sign()
        randint_click_P = SecondFormLocators(driver)
        randint_click_P.randint_click_P()
        randint_click_M = SecondFormLocators(driver)
        randint_click_M.randint_click_M()
        check_dropdown_quantity_kids = SecondFormLocators(driver)
        check_dropdown_quantity_kids.check_dropdown_quantity_kids()
        click_to_dropdown_kids = SecondFormLocators(driver)
        click_to_dropdown_kids.click_to_dropdown_kids()
        check_visibility_dropdown_len = SecondFormLocators(driver)
        check_visibility_dropdown_len.check_visibility_dropdown_len()
        assert_clickable_search_button = SecondFormLocators(driver)
        assert_clickable_search_button.assert_clickable_search_button()

    @pytest.mark.smoke
    def test_hotel_filters(self, driver):
        driver.get(TestDataSecondPage.URL)
        check_visibility_range_block = FiltersLocators(driver)
        check_visibility_range_block.check_visibility_range_block()
        assert_short_details_on_block = FiltersLocators(driver)
        assert_short_details_on_block.assert_short_details_on_block()
        scroll_to_average_price_slider = FiltersLocators(driver)
        scroll_to_average_price_slider.scroll_to_average_price_slider(0, 100)
        assert_hidden_arrow = FiltersLocators(driver)
        assert_hidden_arrow.assert_hidden_arrow()
        assert_hidden_arrow_clickable = FiltersLocators(driver)
        assert_hidden_arrow_clickable.assert_hidden_arrow_clickable()
        assert_cost_block = FiltersLocators(driver)
        assert_cost_block.assert_cost_block()
        assert_functionality_field_form_from = FiltersLocators(driver)
        assert_functionality_field_form_from.assert_functionality_field_form_from()
        send_keys_to_functionality_field_form_from = FiltersLocators(driver)
        send_keys_to_functionality_field_form_from.send_keys_to_functionality_field_form_from()
        assert_functionality_field_form_to = FiltersLocators(driver)
        assert_functionality_field_form_to = FiltersLocators(driver)
        assert_functionality_field_form_to.assert_functionality_field_form_to()
        send_keys_to_functionality_field_form_to = FiltersLocators(driver)
        send_keys_to_functionality_field_form_to.send_keys_to_functionality_field_form_to()

    @pytest.mark.smoke
    def test_star_rating_filter(self, driver):
        driver.get(TestDataSecondPage.URL)
        assert_visibility_arrow = FiltersLocators(driver)
        assert_visibility_arrow.assert_visibility_arrow()
        assert_clickable_arrow = FiltersLocators(driver)
        assert_clickable_arrow.assert_clickable_arrow()
        scroll_to_widget = FiltersLocators(driver)
        scroll_to_widget.scroll_to_widget()
        check_star_rating_container_hotel_present = FiltersLocators(driver)
        check_star_rating_container_hotel_present.check_star_rating_container_hotel_present()
        check_data_name_p = FiltersLocators(driver)
        check_data_name_p.check_data_name_p()
        check_the_check_box_rating_0_2 = FiltersLocators(driver)
        check_the_check_box_rating_0_2.check_the_check_box_rating_0_2()
        check_the_check_box_rating_3_5 = FiltersLocators(driver)
        check_the_check_box_rating_3_5.check_the_check_box_rating_3_5()

    @pytest.mark.smoke
    def test_rating_hotel(self, driver):
        driver.get(TestDataSecondPage.URL)
        scroll_to_rating_hotel = FiltersLocators(driver)
        scroll_to_rating_hotel.scroll_to_rating_hotel()
        check_hotel_rating_container = FiltersLocators(driver)
        check_hotel_rating_container.check_hotel_rating_container()
        assert_rating_blocks = FiltersLocators(driver)
        assert_rating_blocks.assert_rating_blocks()
        assert_rating_box_5 = FiltersLocators(driver)
        assert_rating_box_5.assert_rating_box_5()
        assert_rating_box_6 = FiltersLocators(driver)
        assert_rating_box_6.assert_rating_box_6()
        assert_rating_box_7 = FiltersLocators(driver)
        assert_rating_box_7.assert_rating_box_7()
        assert_rating_box_8 = FiltersLocators(driver)
        assert_rating_box_8.assert_rating_box_8()
        assert_rating_box_9 = FiltersLocators(driver)
        assert_rating_box_9.assert_rating_box_9()
        assert_visibility_hidden_arrow = FiltersLocators(driver)
        assert_visibility_hidden_arrow.assert_visibility_hidden_arrow()
        assert_clickable_hidden_arrow = FiltersLocators(driver)
        assert_clickable_hidden_arrow.assert_clickable_hidden_arrow()

    @pytest.mark.smoke
    def test_distance_to_the_center_filter(self, driver):
        driver.get(TestDataSecondPage.URL)
        scroll_to_distance_filter = FiltersLocators(driver)
        scroll_to_distance_filter.scroll_to_distance_filter()
        wait_page_load = FiltersLocators(driver)
        wait_page_load.wait_page_load()
        assert_h3 = FiltersLocators(driver)
        assert_h3.assert_h3()
        assert_h6 = FiltersLocators(driver)
        assert_h6.assert_h6()
        assert_hidden_upper_arrow = FiltersLocators(driver)
        assert_hidden_upper_arrow.assert_hidden_upper_arrow()
        scroll_range_slider = FiltersLocators(driver)
        scroll_range_slider.scroll_range_slider(-70, 0)

    @pytest.mark.smoke
    def test_type_of_apartments(self, driver):
        driver.get(TestDataSecondPage.URL)
        scroll_to_type_of_apartments = FiltersLocators(driver)
        scroll_to_type_of_apartments.scroll_to_type_of_apartments()
        page_load = FiltersLocators(driver)
        page_load.page_load()
        check_type_of_apartments_container = FiltersLocators(driver)
        check_type_of_apartments_container.check_type_of_apartments_container()
        assert_the_h6_data_name = FiltersLocators(driver)
        assert_the_h6_data_name.assert_the_h6_data_name()
        assert_check_boxes_visibility = FiltersLocators(driver)
        assert_check_boxes_visibility.assert_check_boxes_visibility()
        assert_check_boxes_clickable = FiltersLocators(driver)
        assert_check_boxes_clickable.assert_check_boxes_clickable()
        assert_hidden_arrow_type_of_apartments = FiltersLocators(driver)
        assert_hidden_arrow_type_of_apartments.assert_hidden_arrow_type_of_apartments()
        assert_clickable_hidden_arrow_type_of_apartments = FiltersLocators(driver)
        assert_clickable_hidden_arrow_type_of_apartments.assert_clickable_hidden_arrow_type_of_apartments()
        check_the_under_hidden_link = FiltersLocators(driver)
        check_the_under_hidden_link.check_the_under_hidden_link()

    @pytest.mark.smoke
    def test_amenities_hotel(self, driver):
        driver.get(TestDataSecondPage.URL)
        scroll_to_amenities_hotel = FiltersLocators(driver)
        scroll_to_amenities_hotel.scroll_to_amenities_hotel()
        wait_page_load_element = FiltersLocators(driver)
        wait_page_load_element.wait_page_load_element()
        assert_visibility_container_amenities_hotel = FiltersLocators(driver)
        assert_visibility_container_amenities_hotel.assert_visibility_container_amenities_hotel()
        assert_h3_amenities_hotel = FiltersLocators(driver)
        assert_h3_amenities_hotel.assert_h3_amenities_hotel()
        assert_amenities_check_bos_hotel = FiltersLocators(driver)
        assert_amenities_check_bos_hotel.assert_amenities_check_bos_hotel()
        assert_amenities_hidden_link_present = FiltersLocators(driver)
        assert_amenities_hidden_link_present.assert_amenities_hidden_link_present()
        assert_amenities_hidden_link_clickable = FiltersLocators(driver)
        assert_amenities_hidden_link_clickable.assert_amenities_hidden_link_clickable()

    @pytest.mark.smoke
    def test_amenities_room(self, driver):
        driver.get(TestDataSecondPage.URL)
        scroll_to_amenities_room = FiltersLocators(driver)
        scroll_to_amenities_room.scroll_to_amenities_room()
        wait_until_page_loaded = FiltersLocators(driver)
        wait_until_page_loaded.wait_until_page_loaded()
        assert_amenities_in_the_room_container = FiltersLocators(driver)
        assert_amenities_in_the_room_container.assert_amenities_in_the_room_container()
        assert_amenities_in_the_room_check_box_presence = FiltersLocators(driver)
        assert_amenities_in_the_room_check_box_presence.assert_amenities_in_the_room_check_box_presence()
        assert_amenities_in_the_room_check_box_clickable = FiltersLocators(driver)
        assert_amenities_in_the_room_check_box_clickable.assert_amenities_in_the_room_check_box_clickable()
        assert_upper_hidden_room_link = FiltersLocators(driver)
        assert_upper_hidden_room_link.assert_upper_hidden_room_link()
        assert_hidden_room_link = FiltersLocators(driver)
        assert_hidden_room_link.assert_hidden_room_link()
